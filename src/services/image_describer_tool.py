"""
Module for image processing and description using Google Generative AI.

This script imports necessary modules and classes, loads configuration values from the environment,
and defines a Pydantic model and a tool class for processing and describing images.

Classes:
    ImageProcessingInput(BaseModel): Pydantic model for validating and documenting the expected input for the image describer tool.
    ImageDescriberTool(BaseTool): Class for the image describer tool, extending LangChain's BaseTool.
"""

# Import required modules from the standard library and third-party libraries
import os
import io
import base64
from PIL import Image  # Python Imaging Library for opening and manipulating images
from dotenv import find_dotenv, load_dotenv  # Utilities to load environment variables from .env files
from typing import Type
from pydantic import BaseModel, Field  # For creating data models and validating inputs
from langchain.tools import BaseTool  # Base class for tools within the LangChain framework
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.messages import HumanMessage  # For creating structured messages compatible with LangChain
from langchain_google_genai import ChatGoogleGenerativeAI  # Wrapper for interacting with Google's Generative AI
from langchain_core.tools import ToolException
from src.config.config import get_env_variable  # Function to retrieve environment variables

# Load necessary configuration values (e.g., Google API key) from the environment
google_api_key = get_env_variable("GOOGLE_API_KEY")


##############################################
# Define the ImageProcessingInput class
# ============================================
class ImageProcessingInput(BaseModel):
    """
    Pydantic model for validating and documenting the expected input for the image describer tool.

    Attributes:
        file_path (str): The path to the image file to be processed.
        query (str): Query to send along with the image.
    """
    file_path: str = Field(description="The path to the image file to be processed.")
    query: str = Field(default="describe the image", description="Query to send along with the image.")


##############################################
# Define the ImageDescriberTool class
# ============================================
class ImageDescriberTool(BaseTool):
    """
    Class for the image describer tool, extending LangChain's BaseTool.

    This class provides methods for processing an uploaded image and using Google Generative AI to describe it.

    Attributes:
        name (str): Name of the tool.
        description (str): Short description of what the tool does.
        args_schema (Type[BaseModel]): The input validation model assigned to the tool.
    """
    name: str = "image_describer"  # Name of the tool
    description: str = "Processes an uploaded image and uses Google Generative AI to describe it."
    args_schema: Type[BaseModel] = ImageProcessingInput  # Input validation schema



    ##############################################
    # Define the _run method
    # ============================================
    def _run(self, file_path: str, query: str = "describe the image") -> str:
        """
        Execute a synchronous image processing and description task using the tool.

        This method processes the uploaded image, converts it to a data URL, and uses Google Generative AI to describe it.

        Args:
            file_path (str): The path to the image file.
            query (str): The query to send along with the image.

        Returns:
            str: The description of the image generated by Google Generative AI.
        """
        # Process the uploaded image to prepare it for the API call
        image_parts = self.process_uploaded_image(file_path)
        # Convert the processed image to a data URL format
        image_data_url = self.image_data_to_data_url(image_parts)

        # Initialize Google Generative AI with the API key and specific model
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", api_key=google_api_key) 
        # Create a structured message including the query and the image data URL
        message = HumanMessage(
            content=[
                {"type": "text", "text": query},
                {"type": "image_url", "image_url": image_data_url}
            ]
        )

        # Invoke the Google Generative AI with the structured message and return the results
        results = llm.invoke([message])
        return results


    ##############################################
    # Define the process_uploaded_image method
    # ============================================
    @staticmethod
    def process_uploaded_image(file_path):
        """
        Process the uploaded image file to prepare it for API interaction.

        This method opens the image file, determines its format, and converts it to a byte stream.

        Args:
            file_path (str): The path to the image file.

        Returns:
            list: A list containing a dictionary with MIME type and image data.
        """
        # Open the image file, automatically detecting and managing its format
        with Image.open(file_path) as img:
            file_format = img.format.lower()  # Determine the image format
            buffer = io.BytesIO()  # Create an in-memory byte stream to store the image data
            # Save the image to the byte stream, converting if necessary
            img.save(buffer, format=file_format.upper() if file_format in ['jpeg', 'png'] else "JPEG")
            bytes_data = buffer.getvalue()  # Retrieve the byte data from the stream
            # Determine the MIME type for the image, defaulting to JPEG if unknown
            mime_type = f"image/{file_format}" if file_format in ['jpeg', 'png'] else "image/jpeg"
        # Return the image data and MIME type in a structured format
        return [{"mime_type": mime_type, "data": bytes_data}]


    ##############################################
    # Define the image_data_to_data_url method
    # ============================================
    @staticmethod
    def image_data_to_data_url(image_parts):
        """
        Convert image data to a data URL format.

        This method encodes the image data in base64 and formats it as a data URL.

        Args:
            image_parts (list): A list containing a dictionary with MIME type and image data.

        Returns:
            str: The image data in data URL format.
        """
        # Extract MIME type and image data from the input
        mime_type = image_parts[0]["mime_type"]
        image_data = image_parts[0]["data"]
        # Encode the image data in base64 and format it as a data URL
        base64_data = base64.b64encode(image_data).decode('utf-8')
        return f"data:{mime_type};base64,{base64_data}"
